# Code generated by ChatGPT and then modified by me.
# Purpose of the code is to just split a npz file into two by the field names.
import numpy as np

def split_npz_file(original_file, keys_for_first, output_file1, output_file2):
    # Load original .npz file
    data = np.load(original_file)
    
    # Split data into two dictionaries
    data1 = {key: data[key] for key in keys_for_first if key in data}
    data2 = {key: data[key] for key in data.files if key not in keys_for_first}
    
    print("First set of keys:", data1.keys())
    print("Second set of keys:", data2.keys())

    # Save each subset to new compressed .npz files
    np.savez_compressed(output_file1, **data1)
    np.savez_compressed(output_file2, **data2)
    
    # Reload to verify integrity
    data1_loaded = np.load(output_file1)
    data2_loaded = np.load(output_file2)
    
    # Check that the data matches the original
    for key in data.files:
        original_value = data[key]
        if key in data1_loaded:
            assert np.array_equal(original_value, data1_loaded[key]), f"Mismatch in {key} from {output_file1}"
        elif key in data2_loaded:
            assert np.array_equal(original_value, data2_loaded[key]), f"Mismatch in {key} from {output_file2}"
        else:
            raise ValueError(f"Key {key} missing from both output files!")

    print("Verification passed: The split files match the original.")
    data.close()
    data1_loaded.close()
    data2_loaded.close()

# Example usage
original_file = "SQ_bspline_param_evals_deriv_c.npz"
keys_for_first = {"res_mean_sq_dist", "res_mean_sq_angle"}  # Change this to your desired keys
name1 = "sq_dists_" + "_".join(original_file.split("_")[1:])
name2 = "orig_nonsq_" + "_".join(original_file.split("_")[1:])
split_npz_file(original_file, keys_for_first, name1, name2)
